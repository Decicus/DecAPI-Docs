base_path: "/twitch"
endpoints:
    - route: ""
      notes:
        - 'Lists the currently available endpoints - <strong>Returns a JSON object</strong>'
      bots: false
    - route: "accountage/:user"
      cached: true
      parameters:
        - name: ":user"
          description: 'The name of the user to retrieve the account age for.'
      qs:
        - name: "precision"
          description: 'How precise the timestamp should be in terms of years, months, weeks, days, hours, minutes & seconds.- Default: <code>2</code>.'
      notes:
        - 'Retrieves the account age of the specified user.'
    - route: "avatar/:user"
      cached: true
      parameters:
        - name: ':user'
          description: 'The name of the user to retrieve the avatar for.'
      notes:
        - 'Retrieves the URL of the avatar for the specified user'
        - 'Will fallback to the default Twitch avatar if the user does not have an avatar.'
    - route: "creation/:user"
      cached: true
      parameters:
        - name: ":user"
          description: "The name of the user."
      notes:
        - Retrieves the creation date/time of the specified user.
      qs:
        - name: "format"
          description:
            - 'Formats the date/time based on the <a href="https://www.php.net/manual/en/datetime.format.php#refsect1-datetime.format-parameters">format string</a> specified.'
            - 'Default format: <code>M j. Y - h:i:s A (e)</code>'
          required: false
          type: "string"
        - name: "tz"
          description: 'Specify the timezone that you want the date/time to be displayed as. <a href="https://decapi.me/misc/timezones">List of supported timezones.</a>'
          required: false
          type: "string"
    - route: "followage/:channel/:user?token=YOUR_TOKEN_HERE"
      cached: true
      parameters:
        - name: ":channel"
          description: 'The channel name that will be used as reference for checking the "follow age".'
        - name: ":user"
          description: 'The name of the user that you wish to check the "follow age" for.'
      qs:
        - name: "token"
          required: true
          description: "The token provided by DecAPI when a moderator or the broadcaster authorizes for either followage or followed."
        - name: "precision"
          description: 'How precise the timestamp should be in terms of years, months, weeks, days, hours, minutes & seconds.- Default: <code>2</code>.'
          type: "int"
      notes:
        - '<strong>As of September 2023, a token is required to use this endpoint.</strong> Either a moderator of the channel, or a channel owner themself, has to authorize using this: <a href="https://decapi.me/auth/twitch?redirect=followage&scopes=moderator:read:followers">Click here to authorize</a>.'
        - 'Gets the time difference (also known as the "follow age") between when <code>:user</code> followed <code>:channel</code>'
    - route: "followcount/:channel"
      cached: true
      parameters:
        - name: "channel"
          description: 'The channel name to retrieve the current follower count for.'
      notes:
        - 'Retrieves the current amount of followers a Twitch channel has.'
    - route: "followed/:channel/:user?token=YOUR_TOKEN_HERE"
      cached: true
      parameters:
        - name: ":channel"
          description: 'The channel name.'
        - name: ":user"
          description: 'The name of the user.'
      qs:
        - name: "token"
          required: true
          description: "The token provided by DecAPI when a moderator or the broadcaster authorizes for either followage or followed."
        - name: "tz"
          description: 'Uses a different timezone for displaying date & time other than UTC. <a href="https://decapi.me/misc/timezones">List of supported timezones.</a>'
          type: "string"
        - name: "format"
          description: 'Changes the formatting of the returned date & time. See the <a href="https://www.php.net/manual/en/datetime.format.php#refsect1-datetime.format-parameters"><code>PHP date()</code> documentation</a> for reference.<br>Default format string: <code>M j. Y - h:i:s A (e)</code>'
          type: "string"
      notes:
        - 'As of September 2023, a token is required to use this endpoint. Either a moderator of the channel, or a channel owner themself, has to authorize using this: <a href="https://decapi.me/auth/twitch?redirect=followage&scopes=moderator:read:followers">Click here to authorize</a>.'
        - 'Retrieves the date and time of when the user followed the channel.'
        - 'Example format: <code>Mar 13. 2016 - 07:31:29 PM (UTC)</code>'
    - route: "followers/:channel"
      deprecated: true
      parameters:
        - name: ":channel"
          description: 'The channel name of the channel you wish to retrieve followers for.'
      qs:
        - name: "count"
          description: 'How many followers to get with the request. Default: <code>1</code>. Max: <code>100</code>.'
          type: "int"
        - name: "num"
          description: "Prefixes each follower with a number."
          type: "none"
        - name: "separator"
          description: "Specify the character(s) used for separating each follower. Default: <kbd>, </kbd>"
      notes:
        - '<strong>Deprecated</strong>: You can read more here: <a href="https://gist.github.com/Decicus/daf7234366387636d5d2fe9f59ba0f11#file-2023-08-11_decapi-twitch-follows-endpoints-md">https://gist.github.com/Decicus/daf7234366387636d5d2fe9f59ba0f11#file-2023-08-11_decapi-twitch-follows-endpoints-md</a>'
        - 'Lists the most recent follower(s) a channel has.'
    - route: "following/:user"
      deprecated: true
      parameters:
        - name: ":user"
          description: 'The username of the user you wanna get the "following" channels from.'
      qs:
        - name: "limit"
          description: 'Specifies the max amount of channels listed per request. Minimum: 1. Maximum: 100. Default: 25.'
          type: "int"
        - name: "separator"
          description: 'Specifies the separator used when listing channel names. Default: <code>, </code>.'
          type: "string"
      notes:
        - '<strong>Deprecated</strong>: You can read more here: <a href="https://gist.github.com/Decicus/daf7234366387636d5d2fe9f59ba0f11#file-2023-08-11_decapi-twitch-follows-endpoints-md">https://gist.github.com/Decicus/daf7234366387636d5d2fe9f59ba0f11#file-2023-08-11_decapi-twitch-follows-endpoints-md</a>'
        - 'Retrieves a list of channels that the specified user is following.'
    - route: "game/:channel"
      cached: true
      parameters:
        - name: ":channel"
          description: "The channel name."
      notes:
        - 'Retrieves the current game the channel has been set to.'
    - route: "highlight/:channel"
      parameters:
        - name: ":channel"
          description: 'The channel name.'
      notes:
        - 'Retrieves the latest "highlight" of the specified channel.'
    - route: "id/:user"
      parameters:
        - name: ":user"
          description: 'The name of the user.'
      notes:
        - 'Returns the Twitch user ID of the specified user (if valid).'
    - route: "ingests"
      bots: false
      notes:
        - 'Returns a formatted list of available ingest servers.'
        - 'This is a "legacy" endpoint. It is better to use the official Twitch API endpoint for this: <a href="https://ingest.twitch.tv/ingests">https://ingest.twitch.tv/ingests</a>'
    - route: "multi/:streams"
      parameters:
        - name: ":streams"
          description: 'A space-separated list of streams to generate a multi link with.'
      qs:
        - name: "streams"
          description: 'Can be used as an alternative to the <code>:streams</code> route parameter.'
        - name: "service"
          description: 'Chooses which multistream service you want to use. Specify something bogus for this parameter to get a list of available services. Default: <code>multistream</code>.'
      notes:
        - 'Generates a "multi stream" URL based on the channel names passed to it.'
        - 'While the <code>streams</code> <strong>query</strong> parameter is optional, you have to specify the streams as <strong>either</strong> a <strong>route</strong> parameter or as the <code>streams</code> <strong>query</strong> parameter.'
    - route: "random_sub/:channel"
      qs:
        - name: "count"
          description: "The amount of subscribers to retrieve - Default: <kbd>1</kbd>."
          type: "int"
        - name: "field"
          description: 'What field from the user object to retrieve. See <a href="https://dev.twitch.tv/docs/api/reference#get-broadcaster-subscriptions">Twitch API docs</a> to see which ones are available. Default: <kbd>user_name</kbd>.'
        - name: "separator"
          description: 'What character(s) should separate each subscriber value from each other. Default: <kbd>, </kbd>.'
      notes:
        - 'Retrieves a random subscriber from the channel, assuming they have already authorized with DecAPI.'
        - 'If you have already authorized via "subcount" or "subpoints", you can already use this API.'
    - route: "subcount/:channel"
      cached: true
      parameters:
        - name: ":channel"
          description: "The channel name."
      qs:
        - name: "subtract"
          description: "Subscriber count will subtract the specified value and return the result. If you have 102 subs and you specify subtract=2, it will return 100."
          type: "int"
      notes:
        - 'Retrieves the subscriber count of the specified channel.'
        - '<strong>This only works for channels that have <a href="{{baseUrl}}/auth/twitch?redirect=subcount&scopes=channel:read:subscriptions+user:read:email" target="_blank" rel="noopener noreferrer">authenticated and authorized</a> this app</strong>.'
        - "As of October 2nd, 2021 the subscriber count no longer includes lifetime bot subscriptions or the broadcaster's own subscription. You may need to adjust the <code>subtract</code> parameter if it was previously used for accuracy reasons."
    - route: "subpoints/:channel"
      cached: true
      parameters:
        - name: ":channel"
          description: "The channel name."
      qs:
      notes:
        - 'Retrieves the amount of subscriber points for the specified channel.'
        - '<strong>This only works for channels that have <a href="{{baseUrl}}/auth/twitch?redirect=subpoints&scopes=channel:read:subscriptions+user:read:email" target="_blank" rel="noopener noreferrer">authenticated and authorized</a> this app</strong> (if the channel already uses subcount, this works already).'
        - 'As of October 2nd, 2021 the subscriber points value is now <i>accurately</i> retrieved from the Twitch API. The "subtract" parameter no longer applies and will be ignored.'
    - route: "subscriber_emotes/:channel"
      cached: true
      parameters:
        - name: ":channel"
          description: 'The channel name.'
      notes:
        - 'Retrieves the subscriber emotes for the specified channels and lists them (space-separated).'
        - '<strong>JSON results are supported</strong>.'
      qs:
        - name: 'tiers'
          description: '<strong>Only available in JSON responses</strong>. Specify the <code>tiers</code> parameter with your request and emotes are split into their respective subscriber tiers.'
    - route: "status/:channel"
      cached: true
      parameters:
        - name: ":channel"
          description: 'The channel name.'
      notes:
        - 'Retrieves the current title set on the channel.'
    - route: "team_members/:team_id"
      parameters:
        - name: ":team_id"
          description: 'The team identifier.'
      qs:
        - name: "sort"
          description: 'If this is specified, it will sort the members of the team alphabetically.<br><strong>Recommended for a consistent list between requests.</strong>'
        - name: "text"
          description: 'If this is specified, the list will be returned in plaintext compared to a JSON array.'
        - name: "implode"
          description: 'Works similarly to <code>text</code>.<br />Specify the text that should separate each team member in a plaintext response. This is an alternative to having a list of members separated by a newline.<br />If this is specified, specifying the <code>text</code> query string is not necessary as that will already be implied.'
      notes:
        - 'Retrieves the members of a specified team.'
        - 'The team identifier is the identifier used in URLs. Example: The team "New Game Plus" has the identifier "newgameplus".'
        - '<strong>JSON results are returned by default. See <code>text</code> or <code>implode</code> query string.</strong>.'
    - route: "title/:channel"
      cached: true
      parameters:
        - name: ":channel"
          description: "The channel name."
      notes:
        - 'Works identical to <code>status</code> - Retrieves the current title set on the channel.'
    - route: "total_views/:channel"
      parameters:
        - name: ":channel"
          description: "The channel name."
      notes:
        - 'Displays the "total views" a channel has.'
    - route: "uptime/:channel"
      cached: true
      parameters:
        - name: ":channel"
          description: "The channel name."
      qs:
        - name: "precision"
          description: 'How precise the timestamp should be in terms of days, hours, minutes & seconds - Default: 4.'
        - name: "offline_msg"
          description: 'A custom message to display when the channel is offline. - Default: CHANNEL_NAME is offline'
      notes:
        - 'Returns how long the specified channel has been live for the current broadcast.'
        - 'Even with caching applied, the uptime will still be "calculated" in realtime.'
    - route: "viewercount/:channel"
      cached: true
      parameters:
        - name: ":channel"
          description: "The channel name."
      notes:
        - 'Returns how many viewers the channel has, if they are currently streaming.'
    - route: "videos/:channel"
      cached: true
      parameters:
        - name: ":channel"
          description: "The channel name to retrieve videos for."
      qs:
        - name: 'offset'
          description: 'How many videos to offset by. Default: 0.'
        - name: 'limit'
          description: 'How many videos to retrieve at once. Minimum: 1. Maximum: 100. Default: 1.'
        - name: 'broadcast_type'
          description: 'Comma-separated list of video types to retrieve. <a href="https://dev.twitch.tv/docs/v5/reference/channels/#get-channel-videos">Click here for reference</a>. Since dedicated endpoints for highlights and uploads already exists, this defaults to <code>archive</code>.'
        - name: 'separator'
          description: 'Specifies what the separator between each video is.'
        - name: 'video_format'
          description: 'Specifies the format of each video. Certain "variables" are supported: <code>${title}</code> and <code>${url}</code>. Default value is: <code>${title} - ${url}</code>'
      notes:
        - 'Retrieves the latest videos from a channel.'
        - 'Since it is primarily provided as an alternative to the "latest highlight" and "latest upload" endpoints, it is set to only retrieve VODs (stream archives) by default. Use the <code>broadcast_type</code> parameter to override this.'
    - route: "vod_replay/:channel"
      cached: true
      parameters:
        - name: ":channel"
          description: "The channel name to retrieve the 'VOD replay' for."
      qs:
        - name: "minutes"
          description: "The amount of minutes to go back and link the 'replay' to. Default: 5."
        - name: "offset"
          description: "How many VODs to offset when retrieving the VOD information. Default: 0."
      notes:
        - 'The VOD replay endpoint retrieves the latest VOD (in relation to the <code>offset</code>), takes the specified amount of <code>minutes</code> and returns a timestamped URL. Example: If the streamer has been streaming for roughly 2 hours and 25 minutes and the minutes specified is 15, the URL will be linking to 2 hours and 10 minutes into the VOD.'
        - '<strong>Keep in mind that VOD lengths are not fully updated in realtime, and might be "lagging" a few minutes behind the length of the livestream.</strong>'
